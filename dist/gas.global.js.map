{"version":3,"sources":["../src/MIMETextError.ts","../src/Mailbox.ts","../src/MIMEMessageHeader.ts","../src/MIMEMessageContent.ts","../src/MIMEMessage.ts","../src/entrypoints/gas.ts"],"names":["MIMETextError","message","description","__publicField","Mailbox","input","config","arr","text","v","MIMEMessageHeader","envctx","randomstr","domain","obj","lines","field","isValueDefinedByUser","strval","memo","item","name","fieldMatcher","ind","value","dump","validProps","h","prop","MIMEMessageContentHeader","MIMEMessageContent","data","headers","eol","disposition","MIMEMessage","plaintext","html","primaryMessage","hasAttachments","hasInlineAttachments","structure","attachments","a","inlineAttachments","boundary","msg","matcher","type","opts","encoding","contentId","charset","mailbox","recs","_input","createMimeMessage"],"mappings":"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","file":"gas.global.js","sourcesContent":["export class MIMETextError extends Error {\n    override name = ''\n    description = ''\n\n    constructor (message: string, description = '') {\n        super(description)\n\n        this.name = message\n        this.description = description\n    }\n}\n","import { MIMETextError } from './MIMETextError.js'\n\nexport class Mailbox {\n    reSpecCompliantAddr = /(([^<>\\r\\n]+)\\s)?<[^\\r\\n]+>/\n    name = ''\n    addr = ''\n    type: MailboxType = 'To'\n\n    constructor (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'To' }) {\n        this.type = config.type\n\n        this.parse(input)\n    }\n\n    getAddrDomain (): string {\n        if (this.addr.includes('@')) {\n            const arr = this.addr.split('@')\n            if (arr.length > 1) return arr[1]!\n        }\n        return ''\n    }\n\n    dump (): string {\n        return this.name.length > 0 ? `\"${this.name}\" <${this.addr}>` : `<${this.addr}>`\n    }\n\n    parse (input: MailboxAddrObject | string): this {\n        if (this.isMailboxAddrObject(input)) {\n            this.addr = input.addr\n            if (typeof input.name === 'string') this.name = input.name\n            if (typeof input.type === 'string') this.type = input.type\n            return this\n        }\n\n        if (this.isMailboxAddrText(input)) {\n            const text = input.trim()\n            if (text.startsWith('<') && text.endsWith('>')) {\n                this.addr = text.slice(1, -1)\n                return this\n            }\n            const arr = text.split(' <') as [string, string]\n            arr[0] = /^(\"|')/.test(arr[0]) ? arr[0].slice(1) : arr[0]\n            arr[0] = /(\"|')$/.test(arr[0]) ? arr[0].slice(0, -1) : arr[0]\n            arr[1] = arr[1].slice(0, -1)\n            this.name = arr[0]\n            this.addr = arr[1]\n            return this\n        }\n\n        if (typeof input === 'string') {\n            this.addr = input\n            return this\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_MAILBOX', 'Couldn\\'t recognize the input.')\n    }\n\n    isMailboxAddrText (v: unknown): boolean {\n        return typeof v === 'string' && this.reSpecCompliantAddr.test(v)\n    }\n\n    isMailboxAddrObject (v: unknown): v is MailboxAddrObject {\n        return this.isObject(v) && Object.hasOwn(v, 'addr')\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface MailboxConfig {\n    type: MailboxType\n}\nexport interface MailboxAddrObject {\n    addr: string\n    name?: string\n    type?: MailboxType\n}\nexport type MailboxType = 'To' | 'From' | 'Cc' | 'Bcc'\n","import type { EnvironmentContext } from './MIMEMessage'\nimport { MIMETextError } from './MIMETextError.js'\nimport { Mailbox } from './Mailbox.js'\n\n/*\n    Headers are based on: https://www.rfc-editor.org/rfc/rfc4021#section-2.1\n    (Some are ignored as they can be added later or as a custom header.)\n*/\n\nexport class MIMEMessageHeader {\n    envctx: EnvironmentContext\n    fields: HeaderField[] = [\n        {\n            name: 'Date',\n            generator: () => ((new Date()).toUTCString()).replace(/GMT|UTC/gi, '+0000')\n        },\n        {\n            name: 'From',\n            required: true,\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Sender',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'Reply-To',\n            validate: (v: unknown) => this.validateMailboxSingle(v),\n            dump: (v: unknown) => this.dumpMailboxSingle(v)\n        },\n        {\n            name: 'To',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Cc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Bcc',\n            validate: (v: unknown) => this.validateMailboxMulti(v),\n            dump: (v: unknown) => this.dumpMailboxMulti(v)\n        },\n        {\n            name: 'Message-ID',\n            generator: () => {\n                const randomstr = Math.random().toString(36).slice(2)\n                const from = (this.fields.filter((obj) => obj.name === 'From')[0]!).value as Mailbox\n                const domain = from.getAddrDomain()\n                return '<' + randomstr + '@' + domain + '>'\n            }\n        },\n        {\n            name: 'Subject',\n            required: true,\n            dump: (v: unknown) => {\n                return typeof v === 'string' ? '=?utf-8?B?' + this.envctx.toBase64(v) + '?=' : ''\n            }\n        },\n        {\n            name: 'MIME-Version',\n            generator: () => '1.0'\n        }\n    ]\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n    }\n\n    dump (): string {\n        let lines = ''\n\n        for (const field of this.fields) {\n            if (field.disabled) continue\n            const isValueDefinedByUser = field.value !== undefined && field.value !== null\n            if (!isValueDefinedByUser && field.required) {\n                throw new MIMETextError('MIMETEXT_MISSING_HEADER', `The \"${field.name}\" header is required.`)\n            }\n            if (!isValueDefinedByUser && typeof field.generator !== 'function') continue\n            if (!isValueDefinedByUser && typeof field.generator === 'function') field.value = field.generator()\n            const strval = Object.hasOwn(field, 'dump') && typeof field.dump === 'function'\n                ? field.dump(field.value)\n                : typeof field.value === 'string' ? field.value : ''\n            lines += `${field.name}: ${strval}${this.envctx.eol}`\n        }\n\n        return lines.slice(0, -1 * this.envctx.eol.length)\n    }\n\n    toObject (): HeadersObject {\n        return this.fields.reduce((memo: HeadersObject, item) => {\n            memo[item.name] = item.value\n            return memo\n        }, {})\n    }\n\n    get (name: string): string | Mailbox | Mailbox[] | undefined {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const ind = this.fields.findIndex(fieldMatcher)\n\n        return ind !== -1 ? (this.fields[ind]!).value : undefined\n    }\n\n    set (name: string, value: string | Mailbox | Mailbox[]): HeaderField {\n        const fieldMatcher = (obj: HeaderField): boolean => obj.name.toLowerCase() === name.toLowerCase()\n        const isCustomHeader = !this.fields.some(fieldMatcher)\n\n        if (!isCustomHeader) {\n            const ind = this.fields.findIndex(fieldMatcher)\n            const field = this.fields[ind]!\n            if (field.validate && !field.validate(value)) {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_VALUE', `The value for the header \"${name}\" is invalid.`)\n            }\n            (this.fields[ind]!).value = value\n            return this.fields[ind]!\n        }\n\n        return this.setCustom({\n            name: name,\n            value: value,\n            custom: true,\n            dump: (v: unknown) => typeof v === 'string' ? v : ''\n        })\n    }\n\n    setCustom (obj: HeaderField): HeaderField {\n        if (this.isHeaderField(obj)) {\n            if (typeof obj.value !== 'string') {\n                throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Custom header must have a value.')\n            }\n            this.fields.push(obj)\n            return obj\n        }\n\n        throw new MIMETextError('MIMETEXT_INVALID_HEADER_FIELD', 'Invalid input for custom header. It must be in type of HeaderField.')\n    }\n\n    validateMailboxSingle (v: unknown): v is Mailbox {\n        return v instanceof Mailbox\n    }\n\n    validateMailboxMulti (v: unknown): boolean {\n        return v instanceof Mailbox || this.isArrayOfMailboxes(v)\n    }\n\n    dumpMailboxMulti (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`\n        return this.isArrayOfMailboxes(v) ? v.map(dump).join(`,${this.envctx.eol} `) : v instanceof Mailbox ? dump(v) : ''\n    }\n\n    dumpMailboxSingle (v: unknown): string {\n        const dump = (item: Mailbox): string => item.name.length === 0\n            ? item.dump()\n            : `=?utf-8?B?${this.envctx.toBase64(item.name)}?= <${item.addr}>`\n        return v instanceof Mailbox ? dump(v) : ''\n    }\n\n    isHeaderField (v: unknown): v is HeaderField {\n        const validProps = ['name', 'value', 'dump', 'required', 'disabled', 'generator', 'custom']\n        if (this.isObject(v)) {\n            const h = v as HeaderField\n            if (Object.hasOwn(h, 'name') && typeof h.name === 'string' && h.name.length > 0) {\n                if (!Object.keys(h).some((prop) => !validProps.includes(prop))) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n\n    isArrayOfMailboxes (v: unknown): v is Mailbox[] {\n        return this.isArray(v) && v.every((item: unknown) => item instanceof Mailbox)\n    }\n\n    isArray (v: unknown): v is never[] {\n        return (!!v) && (v.constructor === Array)\n    }\n}\n\nexport class MIMEMessageContentHeader extends MIMEMessageHeader {\n    override fields = [\n        {\n            name: 'Content-ID'\n        },\n        {\n            name: 'Content-Type'\n        },\n        {\n            name: 'Content-Transfer-Encoding'\n        },\n        {\n            name: 'Content-Disposition'\n        }\n    ]\n\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor (envctx: EnvironmentContext) {\n        super(envctx)\n    }\n}\n\nexport type HeadersObject = Record<string, string | Mailbox | Mailbox[] | undefined>\nexport interface HeaderField {\n    name: string\n    dump?: (v: string | Mailbox | Mailbox[] | undefined) => string\n    value?: string | Mailbox | Mailbox[] | undefined\n    validate?: (v: unknown) => boolean\n    required?: boolean\n    disabled?: boolean\n    generator?: () => string\n    custom?: boolean\n}\n","import type { EnvironmentContext } from './MIMEMessage'\nimport type { Mailbox } from './Mailbox'\nimport { type HeadersObject, MIMEMessageContentHeader } from './MIMEMessageHeader.js'\n\nexport class MIMEMessageContent {\n    envctx: EnvironmentContext\n    headers\n    data\n\n    constructor (envctx: EnvironmentContext, data: string, headers = {}) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageContentHeader(this.envctx)\n        this.data = data\n        this.setHeaders(headers)\n    }\n\n    dump (): string {\n        const eol = this.envctx.eol\n        return this.headers.dump() + eol + eol + this.data\n    }\n\n    isAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('attachment')\n    }\n\n    isInlineAttachment (): boolean {\n        const disposition = this.headers.get('Content-Disposition')\n        return typeof disposition === 'string' && disposition.includes('inline')\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n}\n","import type { MailboxAddrObject, MailboxConfig } from './Mailbox.js'\n\nimport { MIMETextError } from './MIMETextError.js'\nimport { type HeadersObject, MIMEMessageHeader } from './MIMEMessageHeader.js'\nimport { Mailbox } from './Mailbox.js'\nimport { MIMEMessageContent } from './MIMEMessageContent.js'\n\nexport class MIMEMessage {\n    envctx: EnvironmentContext\n    headers: MIMEMessageHeader\n    boundaries: Boundaries = { mixed: '', alt: '', related: '' }\n    validTypes = ['text/html', 'text/plain']\n    validContentTransferEncodings = ['7bit', '8bit', 'binary', 'quoted-printable', 'base64']\n    messages: MIMEMessageContent[] = []\n\n    constructor (envctx: EnvironmentContext) {\n        this.envctx = envctx\n        this.headers = new MIMEMessageHeader(this.envctx)\n        this.messages = []\n\n        this.generateBoundaries()\n    }\n\n    asRaw (): string {\n        const eol = this.envctx.eol\n        const lines = this.headers.dump()\n\n        const plaintext = this.getMessageByType('text/plain')\n        const html = this.getMessageByType('text/html')\n        const primaryMessage = html ?? (plaintext ?? undefined)\n\n        if (primaryMessage === undefined) {\n            throw new MIMETextError('MIMETEXT_MISSING_BODY', 'No content added to the message.')\n        }\n\n        const hasAttachments = this.hasAttachments()\n        const hasInlineAttachments = this.hasInlineAttachments()\n\n        const structure = hasInlineAttachments && hasAttachments\n            ? 'mixed+related'\n            : hasAttachments\n                ? 'mixed'\n                : hasInlineAttachments\n                    ? 'related'\n                    : plaintext && html\n                        ? 'alternative'\n                        : ''\n\n        if (structure === 'mixed+related') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                '--' + this.boundaries.mixed + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--' + eol +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'mixed') {\n            const attachments = this.getAttachments()\n                .map((a) => '--' + this.boundaries.mixed + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/mixed; boundary=' + this.boundaries.mixed + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.mixed) + eol +\n                (plaintext && html ? '' : eol) +\n                attachments +\n                '--' + this.boundaries.mixed + '--'\n        } else if (structure === 'related') {\n            const inlineAttachments = this.getInlineAttachments()\n                .map((a) => '--' + this.boundaries.related + eol + a.dump() + eol + eol)\n                .join('')\n                .slice(0, -1 * eol.length)\n            return lines + eol +\n                'Content-Type: multipart/related; boundary=' + this.boundaries.related + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.related) + eol +\n                eol +\n                inlineAttachments +\n                '--' + this.boundaries.related + '--'\n        } else if (structure === 'alternative') {\n            return lines + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                this.dumpTextContent(plaintext, html, this.boundaries.alt) + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else {\n            return lines + eol + primaryMessage.dump()\n        }\n    }\n\n    asEncoded (): string {\n        return this.envctx.toBase64WebSafe(this.asRaw())\n    }\n\n    dumpTextContent (plaintext: MIMEMessageContent | undefined, html: MIMEMessageContent | undefined, boundary: string): string {\n        const eol = this.envctx.eol\n        const primaryMessage = html ?? plaintext\n\n        let data = ''\n\n        if (plaintext && html && (this.hasInlineAttachments() || this.hasAttachments())) {\n            data = '--' + boundary + eol +\n                'Content-Type: multipart/alternative; boundary=' + this.boundaries.alt + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + eol +\n                html.dump() + eol +\n                eol +\n                '--' + this.boundaries.alt + '--'\n        } else if (plaintext && html) {\n            data = '--' + boundary + eol +\n                plaintext.dump() + eol +\n                eol +\n                '--' + boundary + eol +\n                html.dump()\n        } else {\n            data = '--' + boundary + eol +\n                (primaryMessage!).dump()\n        }\n\n        return data\n    }\n\n    hasInlineAttachments (): boolean {\n        return this.messages.some((msg) => msg.isInlineAttachment())\n    }\n\n    hasAttachments (): boolean {\n        return this.messages.some((msg) => msg.isAttachment())\n    }\n\n    getAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getInlineAttachments (): MIMEMessageContent[] | [] {\n        const matcher = (msg: MIMEMessageContent): boolean => msg.isInlineAttachment()\n        return this.messages.some(matcher) ? this.messages.filter(matcher) : []\n    }\n\n    getMessageByType (type: string): MIMEMessageContent | undefined {\n        const matcher = (msg: MIMEMessageContent): boolean => !msg.isAttachment() && !msg.isInlineAttachment() && (msg.getHeader('Content-Type') as string || '').includes(type)\n        return this.messages.some(matcher) ? this.messages.filter(matcher)[0] : undefined\n    }\n\n    addAttachment (opts: AttachmentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        if (typeof opts.filename !== 'string') {\n            throw new MIMETextError('MIMETEXT_MISSING_FILENAME', 'The property \"filename\" must exist while adding attachments.')\n        }\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (this.envctx.validateContentType(type) === false) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `You specified an invalid content type \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? 'base64'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const contentId = opts.headers['Content-ID']\n        if (typeof contentId === 'string' && contentId.length > 2 && !contentId.startsWith('<') && !contentId.endsWith('>')) {\n            opts.headers['Content-ID'] = '<' + opts.headers['Content-ID'] + '>'\n        }\n\n        const disposition = opts.inline ? 'inline' : 'attachment'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; name=\"${opts.filename}\"`,\n            'Content-Transfer-Encoding': encoding,\n            'Content-Disposition': `${disposition}; filename=\"${opts.filename}\"`\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    addMessage (opts: ContentOptions): MIMEMessageContent {\n        if (!this.isObject(opts.headers)) opts.headers = {}\n\n        let type = (opts.headers['Content-Type'] ?? opts.contentType) || 'none'\n        if (!this.validTypes.includes(type)) {\n            throw new MIMETextError('MIMETEXT_INVALID_MESSAGE_TYPE', `Valid content types are ${this.validTypes.join(', ')} but you specified \"${type}\".`)\n        }\n\n        const encoding = (opts.headers['Content-Transfer-Encoding'] ?? opts.encoding) ?? '7bit'\n        if (!this.validContentTransferEncodings.includes(encoding)) {\n            type = 'application/octet-stream'\n        }\n\n        const charset = opts.charset ?? 'UTF-8'\n\n        opts.headers = Object.assign({}, opts.headers, {\n            'Content-Type': `${type}; charset=${charset}`,\n            'Content-Transfer-Encoding': encoding\n        })\n\n        return this._addMessage({ data: opts.data, headers: opts.headers })\n    }\n\n    private _addMessage (opts: { data: string, headers: ContentHeaders }): MIMEMessageContent {\n        const msg = new MIMEMessageContent(this.envctx, opts.data, opts.headers)\n\n        this.messages.push(msg)\n\n        return msg\n    }\n\n    setSender (input: MailboxAddrObject | string, config: MailboxConfig = { type: 'From' }): Mailbox {\n        const mailbox = new Mailbox(input, config)\n        this.setHeader('From', mailbox)\n        return mailbox\n    }\n\n    getSender (): Mailbox | undefined {\n        return this.getHeader('From') as Mailbox\n    }\n\n    setRecipients (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        const arr = !this.isArray(input) ? [input] : input\n        const recs = arr.map((_input) => new Mailbox(_input, config))\n        this.setHeader(config.type, recs)\n        return recs\n    }\n\n    getRecipients (config: MailboxConfig = { type: 'To' }): Mailbox | Mailbox[] | undefined {\n        return this.getHeader(config.type) as Mailbox | Mailbox[] | undefined\n    }\n\n    setRecipient (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setTo (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'To' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setCc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Cc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setBcc (input: MailboxAddrObject | string | MailboxAddrObject[] | string[], config: MailboxConfig = { type: 'Bcc' }): Mailbox[] {\n        return this.setRecipients(input, config)\n    }\n\n    setSubject (value: string): string {\n        this.setHeader('subject', value)\n        return value\n    }\n\n    getSubject (): string | undefined {\n        return this.getHeader('subject') as string\n    }\n\n    setHeader (name: string, value: string | Mailbox | Mailbox[]): string {\n        this.headers.set(name, value)\n        return name\n    }\n\n    getHeader (name: string): string | Mailbox | Mailbox[] | undefined {\n        return this.headers.get(name)\n    }\n\n    setHeaders (obj: Record<string, string | Mailbox | Mailbox[]>): string[] {\n        return Object.keys(obj).map((prop) => this.setHeader(prop, obj[prop]!))\n    }\n\n    getHeaders (): HeadersObject {\n        return this.headers.toObject()\n    }\n\n    toBase64 (v: string): string {\n        return this.envctx.toBase64(v)\n    }\n\n    toBase64WebSafe (v: string): string {\n        return this.envctx.toBase64WebSafe(v)\n    }\n\n    generateBoundaries (): void {\n        this.boundaries = {\n            mixed: Math.random().toString(36).slice(2),\n            alt: Math.random().toString(36).slice(2),\n            related: Math.random().toString(36).slice(2)\n        }\n    }\n\n    isArray (v: unknown): v is unknown[] {\n        return (!!v) && (v.constructor === Array)\n    }\n\n    isObject (v: unknown): v is object {\n        return (!!v) && (v.constructor === Object)\n    }\n}\n\nexport interface EnvironmentContext {\n    toBase64: (v: string) => string\n    toBase64WebSafe: (v: string) => string\n    eol: string\n    validateContentType: (v: string) => string | false\n}\n\nexport interface Boundaries {\n    mixed: string\n    alt: string\n    related: string\n}\n\nexport type ContentTransferEncoding = '7bit' | '8bit' | 'binary' | 'quoted-printable' | 'base64'\n\nexport interface ContentHeaders {\n    'Content-Type'?: string\n    'Content-Transfer-Encoding'?: ContentTransferEncoding\n    'Content-Disposition'?: string\n    'Content-ID'?: string\n    [index: string]: string | undefined\n}\n\nexport interface ContentOptions {\n    data: string\n    encoding?: ContentTransferEncoding\n    contentType: string\n    headers?: ContentHeaders\n    charset?: string\n}\n\nexport interface AttachmentOptions extends ContentOptions {\n    inline?: boolean\n    filename: string\n}\n","import { MIMEMessage } from '../MIMEMessage.js'\n\nconst envctx = {\n    toBase64: function toBase64 (data: string) {\n        return Utilities.base64Encode(data, Utilities.Charset.UTF_8)\n    },\n    toBase64WebSafe: function toBase64WebSafe (data: string) {\n        return Utilities.base64EncodeWebSafe(data)\n    },\n    eol: '\\r\\n',\n    validateContentType: (v: string): string | false => {\n        return v.length > 0 ? v : false\n    }\n}\n\nexport function createMimeMessage (): MIMEMessage {\n    return new MIMEMessage(envctx)\n}\n\nexport { MIMEMessage } from '../MIMEMessage.js'\nexport { Mailbox } from '../Mailbox.js'\nexport { MIMETextError } from '../MIMETextError.js'\nexport { MIMEMessageHeader } from '../MIMEMessageHeader.js'\nexport { MIMEMessageContent } from '../MIMEMessageContent.js'\n\nexport type * from '../MIMEMessage.js'\nexport type * from '../Mailbox.js'\nexport type * from '../MIMETextError.js'\nexport type * from '../MIMEMessageHeader.js'\nexport type * from '../MIMEMessageContent.js'\n"]}